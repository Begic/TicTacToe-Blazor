@page "/game"

@inject IGameLogic GameLogic
@inject UserService UserService
@inject IDialogService DialogService

<PageTitle>TicTacToe</PageTitle>

<MudText Typo="Typo.h5" Style="text-align: center" Class="mb-2">Willkommen beim TicTacToe in Blazor!</MudText>

<div class="game" style="--x-color: @UserService.CurrentPlayers?.ColorPlayerOne; --o-color: @UserService.CurrentPlayers?.ColorPlayerTwo">
    <div class="game-board">
        @for (var row = 0; row < 3; row++)
        {
            <div class="game-row">
                @for (var col = 0; col < 3; col++)
                {
                    var squareId = row * 3 + col + 1;
                    var buttonClass = GetButtonClass(squareId);
                    <button type="button" class="@buttonClass" @onclick="@(() => OnClickSquare(squareId))"></button>
                }
            </div>
        }
    </div>
</div>

<MudText Typo="@Typo.h6" Style="text-align: center">
    It's player <b>@currentPlayerName</b>'s turn
</MudText>

@code
{
    private readonly List<int> pointsPlayerX = new();
    private readonly List<int> pointsPlayerO = new();
    private Player currentPlayer;
    private string currentPlayerName;
    private readonly Dictionary<int, string> buttonClasses = new();
    private Stopwatch stopwatch;

    protected override async Task OnInitializedAsync()
    {
        stopwatch = new Stopwatch();
        currentPlayer = Player.X;
        currentPlayerName = !string.IsNullOrEmpty(UserService.CurrentPlayers?.NamePlayerOne) ? UserService.CurrentPlayers.NamePlayerOne : string.Empty;
    }

    private string GetButtonClass(int squareId)
    {
        if (buttonClasses.ContainsKey(squareId))
        {
            return buttonClasses[squareId];
        }

        return "game-square";
    }

    private void OnClickSquare(int squareId)
    {
        if (!UserService.CurrentPlayers!.PlayVsHuman && !stopwatch.IsRunning)
        {
            stopwatch.Start();
        }
        
        var newButtonClass = currentPlayer == Player.X ? "game-square-x" : "game-square-o";

        if (buttonClasses.ContainsKey(squareId))
        {
            buttonClasses[squareId] = newButtonClass;
        }
        else
        {
            buttonClasses.Add(squareId, newButtonClass);
        }

        if (currentPlayer == Player.X)
        {
            pointsPlayerX.Add(squareId);
        }
        else
        {
            pointsPlayerO.Add(squareId);
        }

        if (!UserService.CurrentPlayers!.PlayVsHuman)
        {
            VersusArtificialIntelligenceLogic();
        }

        var result = GameLogic.CheckWinner(pointsPlayerO, pointsPlayerX);

        if (result == Player.X)
        {
            var time = StopStopwatch();
            OpenWinningDialog(result, time);
            return;
        }

        if (result == Player.O)
        {
            var time = StopStopwatch();
            OpenWinningDialog(result, time);
            return;
        }

        if (pointsPlayerX.Count + pointsPlayerO.Count >= 9)
        {
            var time = StopStopwatch();
            OpenWinningDialog(result, time);
        }
        
        ChangeCurrentPalyer();
    }

    private int StopStopwatch()
    {
        stopwatch.Stop();
        return stopwatch.Elapsed.Seconds;
    }

    private void VersusArtificialIntelligenceLogic()
    {
        var newSquareId = GameLogic.GetNextMove(pointsPlayerX, pointsPlayerO);

        ChangeCurrentPalyer();

        var newButtonClass2 = currentPlayer == Player.X ? "game-square-x" : "game-square-o";

        if (buttonClasses.ContainsKey(newSquareId))
        {
            buttonClasses[newSquareId] = newButtonClass2;
        }
        else
        {
            buttonClasses.Add(newSquareId, newButtonClass2);
        }

        pointsPlayerO.Add(newSquareId);
    }
    
    private void ChangeCurrentPalyer()
    {
        if (currentPlayer == Player.X)
        {
            if (UserService.CurrentPlayers!.PlayVsHuman)
            {
                currentPlayerName = UserService.CurrentPlayers.NamePlayerTwo;
            }
            else
            {
                currentPlayerName = "Artificial intelligence";
            }
        }

        if (currentPlayer == Player.O)
        {
            currentPlayerName = UserService.CurrentPlayers?.NamePlayerOne;
        }

        currentPlayer = currentPlayer == Player.X ? currentPlayer = Player.O : currentPlayer = Player.X;

        StateHasChanged();
    }

    private void OpenWinningDialog(Player winner, double? playedTime)
    {
        DialogService.Show<DialogShowWinner>(string.Empty, new DialogParameters
        {
            { nameof(DialogShowWinner.Winner), winner },
            { nameof(DialogShowWinner.PlayedTime), playedTime }
        }, new DialogOptions
        {
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            CloseButton = false,
            CloseOnEscapeKey = false
        });
    }
}