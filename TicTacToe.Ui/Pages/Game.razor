@page "/game"
@using TicTacToe.Ui.Dialogs

@inject IGameLogic GameLogic
@inject UserService UserService
@inject IDialogService DialogService

<PageTitle>TicTacToe</PageTitle>

<MudText Typo="Typo.h5" Style="text-align: center" Class="mb-2">Willkommen beim TicTacToe in Blazor!</MudText>

<div class="game" style="--x-color: @UserService.CurrentPlayers.ColorPlayerOne; --o-color: @UserService.CurrentPlayers.ColorPlayerTwo">
    <div class="game-board">
        @for (var row = 0; row < 3; row++)
        {
            <div class="game-row">
                @for (var col = 0; col < 3; col++)
                {
                    var squareId = row * 3 + col + 1;
                    var buttonClass = GetButtonClass(squareId);
                    <button type="button" class="@buttonClass" @onclick="@(() => OnClickSquare(squareId))"></button>
                }
            </div>
        }
    </div>
</div>

@code
{
    public List<int> pointsPlayerX { get; set; } = new();
    public List<int> pointsPlayerO { get; set; } = new();

    public Player CurrentPlayer { get; set; }

    private Dictionary<int, string> buttonClasses = new();

    protected override async Task OnInitializedAsync()
    {
        CurrentPlayer = Player.X;
    }

    private string GetButtonClass(int squareId)
    {
        if (buttonClasses.ContainsKey(squareId))
        {
            return buttonClasses[squareId];
        }
        return "game-square";
    }

    private void OnClickSquare(int squareId)
    {
        var newButtonClass = CurrentPlayer == Player.X ? "game-square-x" : "game-square-o";

        if (buttonClasses.ContainsKey(squareId))
        {
            buttonClasses[squareId] = newButtonClass;
        }
        else
        {
            buttonClasses.Add(squareId, newButtonClass);
        }

        if (CurrentPlayer == Player.X)
        {
            pointsPlayerX.Add(squareId);
        }
        else
        {
            pointsPlayerO.Add(squareId);
        }

        var result = GameLogic.CheckWinner(pointsPlayerO, pointsPlayerX);

        if (result == Player.X)
        {
            OpenWinningDialog(result);
        }

        if (result == Player.O)
        {
            OpenWinningDialog(result);
        }

        CurrentPlayer = CurrentPlayer == Player.X ? Player.O : Player.X;
    }

    private void OpenWinningDialog(Player winner)
    {
        DialogService.Show<DialogShowWinner>(string.Empty, new DialogParameters
        {
            {nameof(DialogShowWinner.Winner), winner},
        }, new DialogOptions
        {
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            CloseButton = false,
            CloseOnEscapeKey = false,
        });
    }
}